#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    tcp
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

# listen  stats   *:1936
#         mode            http
#         log             global

#         maxconn 10

#         clitimeout      100s
#         srvtimeout      100s
#         contimeout      100s
#         timeout queue   100s

#         stats enable
#         stats hide-version
#         stats refresh 10s
#         stats show-node
#         stats auth admin:password
#         stats uri  /haproxy?stats

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend  main *:5000
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#
#    use_backend static          if url_static
#    default_backend             app

frontend http *:80
    mode http
    option tcplog
    default_backend    ocp_http

frontend https *:443
    mode tcp
    option tcplog
    default_backend    ocp_https

frontend k8sapi *:6443
    mode tcp
    option tcplog
    default_backend    ocp_k8sapi

frontend configserver *:22623
    mode tcp
    option tcplog
    default_backend    ocp_configserver

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check
#
##---------------------------------------------------------------------
## round robin balancing between the various backends
##---------------------------------------------------------------------
backend ocp_http
    balance    roundrobin
    mode http
    option httplog
  %{ for index, ip in COMPUTE_IDS ~}
  server     http-compute-${index}.labs.${CLUSTER_DOMAIN}   compute-${index}.labs.${CLUSTER_DOMAIN}:80    check
  %{ endfor ~}

backend ocp_https
    balance    roundrobin
    mode       tcp
  %{ for index, ip in COMPUTE_IDS ~}
  server     https-compute-${index}.labs.${CLUSTER_DOMAIN}  compute-${index}.labs.${CLUSTER_DOMAIN}:443    check
  %{ endfor ~}


backend ocp_k8sapi
    balance    roundrobin
    mode       tcp
  %{ for index, ip in MASTER_IPS ~}
  server     k8sapi-control-plane-${index}.labs.${CLUSTER_DOMAIN}  control-plane-${index}.labs.${CLUSTER_DOMAIN}:6443    check
  %{ endfor ~}
  %{ if BOOTSTRAP_IP != "" ~}
server     k8sapi-ocp-lab-bootstrap.labs.${CLUSTER_DOMAIN}   ocp-lab-bootstrap.labs.${CLUSTER_DOMAIN}:6443    check  inter 5s  fall 3
  %{ endif ~}

backend ocp_configserver
    balance    roundrobin
    mode tcp
  %{ for index, ip in MASTER_IPS ~}
  server     config-control-plane-${index}.labs.${CLUSTER_DOMAIN}   control-plane-${index}.labs.${CLUSTER_DOMAIN}:22623    check
  %{ endfor ~}
  %{ if BOOTSTRAP_IP !="" ~}
server     config-ocp-lab-bootstrap.labs.${CLUSTER_DOMAIN}   ocp-lab-bootstrap.labs.${CLUSTER_DOMAIN}:6443    check  inter 5s  fall 3
  %{ endif ~}